html
  meta(charset='utf-8')
  style.
    #nodegroup1{
    fill:#000000;
    font-family: Serif, Georgia;
    font-size: 14px;
    font-weight: bold;
    }
    .nodetext{
    font-size:8;
    color: red;
    }
    .edges{
    stroke: #ccc;
    /*stroke-width: 2;*/
    }
  body
    script(src='//d3js.org/d3.v3.min.js')
    script.
      var w = 1000;
      var h = 500;
      var svg = d3.select("body").append("svg")
      .attr("width", w)
      .attr("height", h);
      //svg.append("text")
      //.text("")
      //.attr("x",10)
      //.attr("y",15);
      var colors = d3.scale.category10()
      .range(["#e41a1c",  //RED
      "#FFFF00",  //YELLOW
      ]);
      //d3.json("graph.json", function(error, dataset){
      //dataset = {"nodes":[{"name":"yelp_academic_dataset_business_1.json","origin":"/yelp_academic_dataset_business_1.json","group":1,"url":"http://example.com/yelp_academic_dataset_business_1.json"},{"name":"LIST_9816","origin":"/yelp_academic_dataset_business_1.json/LIST_9816"},{"name":"name","origin":"/yelp_academic_dataset_business_1.json/LIST_9816/name"},{"name":"hours","origin":"/yelp_academic_dataset_business_1.json/LIST_9816/name/hours"},{"name":"LIST_250","origin":"/yelp_academic_dataset_business_1.json/LIST_250"},{"name":"name","origin":"/yelp_academic_dataset_business_1.json/LIST_250/name"},{"name":"friday","origin":"/yelp_academic_dataset_business_1.json/LIST_250/name/friday"}],"links":[{"source":0,"target":1},{"source":1,"target":2},{"source":2,"target":3},{"source":3,"width":10,"target":2},{"source":2,"width":10,"target":1},{"source":1,"width":10,"target":0},{"source":0,"width":10,"target":4},{"source":4,"width":10,"target":5},{"source":5,"width":10,"target":6}]}
      var dataset = JSON.parse(!{dataset});
      var force = d3.layout.force()
      .nodes(dataset.nodes)
      .links(dataset.links)
      .gravity(.05)
      .charge(-180)
      .linkDistance(100)
      .linkStrength(0.5)
      .size([w, h])
      .start();
      var drag = force.drag()
      .on("dragstart", dragstart);
      var edges = svg.selectAll("line")
      .data(dataset.links)
      .enter()
      .append("line")
      .attr("id",function(d,i){return 'edge'+i})
      .attr("class", "edges")
      .attr("marker-end", "url(#end)");
      var nodes = svg.selectAll("g.node")
      .data(dataset.nodes)
      .enter()
      .append("g")
      .attr("class", "node")
      .on("dblclick", function (d) {
      if(d.url){
      location.href = d.url;
      }
      })
      .call(drag);
      nodes.append("circle")
      .attr("r", 10)
      .style("fill", function(d) { return colors(d.group); })
      .style("stroke", "black")
      // Mousover Node - highlight node by fading the node colour during mouseover
      .on('mouseover', function(d){
      var nodeSelection = d3.select(this).style({opacity:'0.5'});
      })
      //Mouseout Node  - bring node back to full colour
      .on('mouseout', function(d){
      var nodeSelection= d3.select(this).style({opacity:'1.0',})
      })
      // dx sets how close to the node the label appears
      nodes.append("text")
      .attr("class", "nodetext")
      .attr("dx", 12)
      .attr("dy", ".35em")
      .attr("id", function(d,i){return 'nodegroup1'}) // All nodes same style
      .text(function(d) { return d.name });            // Just the name
      // Edge Paths
      var edgepaths = svg.selectAll(".edgepath")
      .data(dataset.links)
      .enter()
      .append('path')
      .attr({'d': function(d) {return 'M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y},
      'class':'edgepath',
      })
      .style("pointer-events", "none");
      // dx : the starting distance of the label from the source node
      var edgelabels = svg.selectAll(".edgelabel")
      .data(dataset.links)
      .enter()
      .append('text')
      .style("pointer-events", "none")
      .attr({'class':'edgelabel',
      'id':function(d,i){return d.label},
      'dx':40,
      'dy':0
      });
      force.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; })
      .attr("stroke-width", function(d){
      // alert(d.width);
      return d.width;
      });
      nodes.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
      edgepaths.attr('d', function(d) { var path='M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y;
      //console.log(d)
      return path});
      });
      // Double click to 'unfix' the node and have forces start to act on it again.
      //function dblclick(d) {
      //  d3.select(this).classed("fixed", d.fixed = false);
      // }
      // Set the "fixed" property of the dragged node to TRUE when a dragstart event is initiated,
      //   - removes "forces" from acting on that node and changing its position.
      function dragstart(d) {
      d3.select(this).classed("fixed", d.fixed = true);
      }
      //});
